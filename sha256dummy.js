function sha256(ascii) {
    const primeS = [ 
        2**0.5-1, 3**0.5-1, 5**0.5-1, 7**0.5-1, 11**0.5-1, 13**0.5-1, 17**0.5-1, 19**0.5-1,
        23**0.5-1, 29**0.5-1, 31**0.5-1, 37**0.5-1, 41**0.5-1, 43**0.5-1, 47**0.5-1, 53**0.5-1,
        59**0.5-1, 61**0.5-1, 67**0.5-1, 71**0.5-1, 73**0.5-1, 79**0.5-1, 83**0.5-1, 89**0.5-1,
        97**0.5-1, 101**0.5-1, 103**0.5-1, 107**0.5-1, 109**0.5-1, 113**0.5-1, 127**0.5-1, 131**0.5-1,
        137**0.5-1, 139**0.5-1, 149**0.5-1, 151**0.5-1, 157**0.5-1, 163**0.5-1, 167**0.5-1, 173**0.5-1,
        179**0.5-1, 181**0.5-1, 191**0.5-1, 193**0.5-1, 197**0.5-1, 199**0.5-1, 211**0.5-1, 223**0.5-1,
        227**0.5-1, 229**0.5-1, 233**0.5-1, 239**0.5-1, 241**0.5-1, 251**0.5-1, 257**0.5-1, 263**0.5-1,
        269**0.5-1, 271**0.5-1, 277**0.5-1, 281**0.5-1, 283**0.5-1, 293**0.5-1, 307**0.5-1, 311**0.5-1,
        313**0.5-1, 317**0.5-1, 331**0.5-1, 337**0.5-1, 347**0.5-1, 349**0.5-1, 353**0.5-1, 359**0.5-1,
        367**0.5-1, 373**0.5-1, 379**0.5-1, 383**0.5-1, 389**0.5-1, 397**0.5-1, 401**0.5-1, 409**0.5-1,
        419**0.5-1, 421**0.5-1, 431**0.5-1, 433**0.5-1, 439**0.5-1, 443**0.5-1, 449**0.5-1, 457**0.5-1,
        461**0.5-1, 463**0.5-1, 467**0.5-1, 479**0.5-1, 487**0.5-1, 491**0.5-1, 499**0.5-1, 503**0.5-1,
        509**0.5-1, 521**0.5-1, 523**0.5-1, 541**0.5-1, 547**0.5-1, 557**0.5-1, 563**0.5-1, 569**0.5-1,
        571**0.5-1, 577**0.5-1, 587**0.5-1, 593**0.5-1, 599**0.5-1, 601**0.5-1, 607**0.5-1, 613**0.5-1,
        617**0.5-1, 619**0.5-1, 631**0.5-1, 641**0.5-1, 643**0.5-1, 647**0.5-1, 653**0.5-1, 659**0.5-1,
        661**0.5-1, 673**0.5-1, 677**0.5-1, 683**0.5-1, 691**0.5-1, 701**0.5-1, 709**0.5-1, 719**0.5-1,
        727**0.5-1, 733**0.5-1, 739**0.5-1, 743**0.5-1, 751**0.5-1, 757**0.5-1, 761**0.5-1, 769**0.5-1,
        773**0.5-1, 787**0.5-1, 797**0.5-1, 809**0.5-1, 811**0.5-1, 821**0.5-1, 823**0.5-1, 827**0.5-1,
        829**0.5-1, 839**0.5-1, 853**0.5-1, 857**0.5-1, 859**0.5-1, 863**0.5-1, 877**0.5-1, 881**0.5-1,
        883**0.5-1, 887**0.5-1, 907**0.5-1, 911**0.5-1, 919**0.5-1, 929**0.5-1, 937**0.5-1, 941**0.5-1,
        947**0.5-1, 953**0.5-1, 967**0.5-1, 971**0.5-1, 977**0.5-1, 983**0.5-1, 991**0.5-1, 997**0.5-1 
    ];
    const primes = primeS.map(x => Math.floor(x * 2**32));

    function add(a, b) {
        return (a + b) >>> 0;
    }

    function rol(val, shift) {
        return (val << shift) | (val >>> (32 - shift));
    }

    function sha256Round(h, w) {
        let [a, b, c, d, e, f, g, k] = h;
        for (let i = 0; i < 64; i++) {
            const temp1 = add(add(add(add(k[i], w[i]), g), ch(e, f, g)), h[7]);
            const temp2 = add(maj(a, b, c), sigma0(a));
            h = [add(temp1, temp2), a, b, c, add(d, temp1), e, f, g];
        }
        return h;
    }

    function hashBlock(h, block) {
        let w = block.slice();
        for (let i = 16; i < 64; i++) {
            const s0 = sigma0(w[i - 15]);
            const s1 = sigma1(w[i - 2]);
            w[i] = add(add(add(w[i - 16], s0), w[i - 7]), s1);
        }
        return sha256Round(h, w);
    }

    function sha256(data) {
        const padded = padData(data);
        let h = primes.slice(0, 8);
        for (let i = 0; i < padded.length; i += 16) {
            h = hashBlock(h, padded.slice(i, i + 16));
        }
        return h.map(x => x.toString(16).padStart(8, '0')).join('');
    }

    function padData(data) {
        const len = data.length * 8;
        data += '\x80';
        while ((data.length % 64) !== 56) {
            data += '\x00';
        }
        for (let i = 0; i < 8; i++) {
            data += String.fromCharCode((len >> ((7 - i) * 8)) & 255);
        }
        return data;
    }

    return sha256(ascii);
}

const hashValue = sha256('Hello, world!');
console.log(hashValue);
